为什么需要配置中心
如果只是通过配置文件,搭配viper,服务多,修改的也多
或者大量的服务需要同样一个数据比如jwt,如果要每个都修改那么工作量会很大
有的情况修改配置文件还要重启服务
使用配置中心,统一管理配置



nacos官方支持多种语言,http
安装:
docker run --name nacos-standalone -e MODE=standalone -e JVM_XMX=512m -e JVM_XMS=512m -e JVM_XMN=256m -p 8848:8848 -d nacos/nacos-server:latest
访问:http://127.0.0.1:8848/nacos/index.html   nacos/nacos


nacos基本使用:
主要是配置管理和命名空间

新建配置:data id配置集(字符串)
可以将配置文件比如yaml复制过来

可以创建命名空间来管理比如user服务就对应一个user命名空间,会有一个命名空间id
然后再user命名空间下创建user-api和user-rpc的配置
数据库的配置也可以独立一个配置集(配置文件)

习惯用命名空间来区分微服务,一个微服务一个命名空间
不同的命名空间也就是不同的微服务通过组来区分开发生产测试等环境(Group)
可以通过克隆来修改组

data id可以一致,但最好能够区别开来

使用go的sdk来获取nacos的数据:
先提前准备好user-rpc和user-api的开发生产环境共4个配置集
https://github.com/nacos-group/nacos-sdk-go/blob/master/README.md
github.com/nacos-group/nacos-sdk-go   go get -u github.com/nacos-group/nacos-sdk-go/v2
操作nacos的客户端,获取设置配置并且热更新
nacos除了配置中心也能做注册中心

----------------------------------
教程:
Nacos-sdk-go
Nacos-sdk-go是Nacos的Go语言客户端，它实现了服务发现和动态配置的功能

使用限制
支持Go>=v1.15版本
支持Nacos>2.x版本

安装
使用go get安装SDK：
$ go get -u github.com/nacos-group/nacos-sdk-go/v2

快速使用
ClientConfig:
constant.ClientConfig{
	TimeoutMs            uint64 // 请求Nacos服务端的超时时间，默认是10000ms
	NamespaceId          string // ACM的命名空间Id
	Endpoint             string // 当使用ACM时，需要该配置. https://help.aliyun.com/document_detail/130146.html
	RegionId             string // ACM&KMS的regionId，用于配置中心的鉴权
	AccessKey            string // ACM&KMS的AccessKey，用于配置中心的鉴权
	SecretKey            string // ACM&KMS的SecretKey，用于配置中心的鉴权
	OpenKMS              bool   // 是否开启kms，默认不开启，kms可以参考文档 https://help.aliyun.com/product/28933.html
	                            // 同时DataId必须以"cipher-"作为前缀才会启动加解密逻辑
	CacheDir             string // 缓存service信息的目录，默认是当前运行目录
	UpdateThreadNum      int    // 监听service变化的并发数，默认20
	NotLoadCacheAtStart  bool   // 在启动的时候不读取缓存在CacheDir的service信息
	UpdateCacheWhenEmpty bool   // 当service返回的实例列表为空时，不更新缓存，用于推空保护
	Username             string // Nacos服务端的API鉴权Username
	Password             string // Nacos服务端的API鉴权Password
	LogDir               string // 日志存储路径
	RotateTime           string // 日志轮转周期，比如：30m, 1h, 24h, 默认是24h
	MaxAge               int64  // 日志最大文件数，默认3
	LogLevel             string // 日志默认级别，值必须是：debug,info,warn,error，默认值是info
}

ServerConfig:
constant.ServerConfig{
	ContextPath string // Nacos的ContextPath，默认/nacos，在2.0中不需要设置
	IpAddr      string // Nacos的服务地址
	Port        uint64 // Nacos的服务端口
	Scheme      string // Nacos的服务地址前缀，默认http，在2.0中不需要设置
	GrpcPort    uint64 // Nacos的 grpc 服务端口, 默认为 服务端口+1000, 不是必填
}

我们可以配置多个ServerConfig，客户端会对这些服务端做轮询请求





Create client:
// 创建clientConfig
clientConfig := constant.ClientConfig{
	NamespaceId:         "e525eafa-f7d7-4029-83d9-008937f9d468", // 如果需要支持多namespace，我们可以创建多个client,它们有不同的NamespaceId。当namespace是public时，此处填空字符串。
	TimeoutMs:           5000,
	NotLoadCacheAtStart: true,
	LogDir:              "/tmp/nacos/log",
	CacheDir:            "/tmp/nacos/cache",
	LogLevel:            "debug",
}

// 创建clientConfig的另一种方式
clientConfig := *constant.NewClientConfig(
    constant.WithNamespaceId("e525eafa-f7d7-4029-83d9-008937f9d468"), //当namespace是public时，此处填空字符串。
    constant.WithTimeoutMs(5000),
    constant.WithNotLoadCacheAtStart(true),
    constant.WithLogDir("/tmp/nacos/log"),
    constant.WithCacheDir("/tmp/nacos/cache"),
    constant.WithLogLevel("debug"),
)

// 至少一个ServerConfig
serverConfigs := []constant.ServerConfig{
    {
        IpAddr:      "console1.nacos.io",
        ContextPath: "/nacos",
        Port:        80,
        Scheme:      "http",
    },
    {
    	IpAddr:      "console2.nacos.io",
    	ContextPath: "/nacos",
    	Port:        80,
        Scheme:      "http",
    },
}

// 创建serverConfig的另一种方式
serverConfigs := []constant.ServerConfig{
    *constant.NewServerConfig(
        "console1.nacos.io",
        80,
        constant.WithScheme("http"),
        constant.WithContextPath("/nacos"),
    ),
    *constant.NewServerConfig(
        "console2.nacos.io",
        80,
        constant.WithScheme("http"),
        constant.WithContextPath("/nacos"),
    ),
}

// 创建服务发现客户端
_, _ := clients.CreateNamingClient(map[string]interface{}{
	"serverConfigs": serverConfigs,
	"clientConfig":  clientConfig,
})

// 创建动态配置客户端
_, _ := clients.CreateConfigClient(map[string]interface{}{
	"serverConfigs": serverConfigs,
	"clientConfig":  clientConfig,
})

// 创建服务发现客户端的另一种方式 (推荐)
namingClient, err := clients.NewNamingClient(
    vo.NacosClientParam{
        ClientConfig:  &clientConfig,
        ServerConfigs: serverConfigs,
    },
)

// 创建动态配置客户端的另一种方式 (推荐)
configClient, err := clients.NewConfigClient(
    vo.NacosClientParam{
        ClientConfig:  &clientConfig,
        ServerConfigs: serverConfigs,
    },
)


Create client for ACM:
https://help.aliyun.com/document_detail/130146.html
cc := constant.ClientConfig{
  Endpoint:    "acm.aliyun.com:8080",
  NamespaceId: "e525eafa-f7d7-4029-83d9-008937f9d468",
  RegionId:    "cn-shanghai",
  AccessKey:   "LTAI4G8KxxxxxxxxxxxxxbwZLBr",
  SecretKey:   "n5jTL9YxxxxxxxxxxxxaxmPLZV9",
  OpenKMS:     true,
  TimeoutMs:   5000,
  LogLevel:    "debug",
}

// a more graceful way to create config client
client, err := clients.NewConfigClient(
  vo.NacosClientParam{
    ClientConfig: &cc,
  },
)



服务发现
注册实例：RegisterInstance:
success, err := namingClient.RegisterInstance(vo.RegisterInstanceParam{
    Ip:          "10.0.0.11",
    Port:        8848,
    ServiceName: "demo.go",
    Weight:      10,
    Enable:      true,
    Healthy:     true,
    Ephemeral:   true,
    Metadata:    map[string]string{"idc":"shanghai"},
    ClusterName: "cluster-a", // 默认值DEFAULT
    GroupName:   "group-a",   // 默认值DEFAULT_GROUP
})



注销实例：DeregisterInstance:

success, err := namingClient.DeregisterInstance(vo.DeregisterInstanceParam{
    Ip:          "10.0.0.11",
    Port:        8848,
    ServiceName: "demo.go",
    Ephemeral:   true,
    Cluster:     "cluster-a", // 默认值DEFAULT
    GroupName:   "group-a",   // 默认值DEFAULT_GROUP
})



获取服务信息：GetService
services, err := namingClient.GetService(vo.GetServiceParam{
    ServiceName: "demo.go",
    Clusters:    []string{"cluster-a"}, // 默认值DEFAULT
    GroupName:   "group-a",             // 默认值DEFAULT_GROUP
})
获取所有的实例列表：SelectAllInstances
// SelectAllInstance可以返回全部实例列表,包括healthy=false,enable=false,weight<=0
instances, err := namingClient.SelectAllInstances(vo.SelectAllInstancesParam{
    ServiceName: "demo.go",
    GroupName:   "group-a",             // 默认值DEFAULT_GROUP
    Clusters:    []string{"cluster-a"}, // 默认值DEFAULT
})
获取实例列表 ：SelectInstances
// SelectInstances 只返回满足这些条件的实例列表：healthy=${HealthyOnly},enable=true 和weight>0
instances, err := namingClient.SelectInstances(vo.SelectInstancesParam{
    ServiceName: "demo.go",
    GroupName:   "group-a",             // 默认值DEFAULT_GROUP
    Clusters:    []string{"cluster-a"}, // 默认值DEFAULT
    HealthyOnly: true,
})
获取一个健康的实例（加权随机轮询）：SelectOneHealthyInstance
// SelectOneHealthyInstance将会按加权随机轮询的负载均衡策略返回一个健康的实例
// 实例必须满足的条件：health=true,enable=true and weight>0
instance, err := namingClient.SelectOneHealthyInstance(vo.SelectOneHealthInstanceParam{
    ServiceName: "demo.go",
    GroupName:   "group-a",             // 默认值DEFAULT_GROUP
    Clusters:    []string{"cluster-a"}, // 默认值DEFAULT
})
监听服务变化：Subscribe
// Subscribe key=serviceName+groupName+cluster
// 注意:我们可以在相同的key添加多个SubscribeCallback.
err := namingClient.Subscribe(vo.SubscribeParam{
    ServiceName: "demo.go",
    GroupName:   "group-a",             // 默认值DEFAULT_GROUP
    Clusters:    []string{"cluster-a"}, // 默认值DEFAULT
    SubscribeCallback: func(services []model.Instance, err error) {
        log.Printf("\n\n callback return services:%s \n\n", utils.ToJsonString(services))
    },
})
取消服务监听：Unsubscribe
err := namingClient.Unsubscribe(vo.SubscribeParam{
    ServiceName: "demo.go",
    GroupName:   "group-a",             // 默认值DEFAULT_GROUP
    Clusters:    []string{"cluster-a"}, // 默认值DEFAULT
    SubscribeCallback: func(services []model.Instance, err error) {
        log.Printf("\n\n callback return services:%s \n\n", utils.ToJsonString(services))
    },
})
获取服务名列表:GetAllServicesInfo
serviceInfos, err := namingClient.GetAllServicesInfo(vo.GetAllServiceInfoParam{
    NameSpace: "0e83cc81-9d8c-4bb8-a28a-ff703187543f",
    PageNo:   1,
    PageSize: 10,
	}),
动态配置
发布配置：PublishConfig
success, err := configClient.PublishConfig(vo.ConfigParam{
    DataId:  "dataId",
    Group:   "group",
    Content: "hello world!222222"})
删除配置：DeleteConfig
success, err = configClient.DeleteConfig(vo.ConfigParam{
    DataId: "dataId",
    Group:  "group"})
获取配置：GetConfig
content, err := configClient.GetConfig(vo.ConfigParam{
    DataId: "dataId",
    Group:  "group"})
监听配置变化：ListenConfig
err := configClient.ListenConfig(vo.ConfigParam{
    DataId: "dataId",
    Group:  "group",
    OnChange: func(namespace, group, dataId, data string) {
        fmt.Println("group:" + group + ", dataId:" + dataId + ", data:" + data)
	},
})
取消配置监听：CancelListenConfig
err := configClient.CancelListenConfig(vo.ConfigParam{
    DataId: "dataId",
    Group:  "group",
})
搜索配置: SearchConfig
configPage,err := configClient.SearchConfig(vo.SearchConfigParam{
    Search:   "blur",
    DataId:   "",
    Group:    "",
    PageNo:   1,
    PageSize: 10,
})






























http://nacos.io/zh-cn/docs/v2/quickstart/quick-start-docker.html
--------------------------------------------
Clone 项目

git clone https://github.com/nacos-group/nacos-docker.git
cd nacos-docker
单机模式 Derby

docker-compose -f example/standalone-derby.yaml up
单机模式 MySQL

如果希望使用MySQL5.7

docker-compose -f example/standalone-mysql-5.7.yaml up
如果希望使用MySQL8

docker-compose -f example/standalone-mysql-8.yaml up
集群模式

docker-compose -f example/cluster-hostname.yaml up
服务注册

curl -X POST 'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&ip=20.18.7.10&port=8080'
服务发现

curl -X GET 'http://127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=nacos.naming.serviceName'
发布配置

curl -X POST "http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&group=test&content=helloWorld"
获取配置

  curl -X GET "http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&group=test"
Nacos 控制台

link：http://127.0.0.1:8848/nacos/

Common property configuration
属性名称	描述	选项
MODE	系统启动方式: 集群/单机	cluster/standalone默认 cluster
NACOS_SERVERS	集群地址	p1:port1空格ip2:port2 空格ip3:port3
PREFER_HOST_MODE	支持IP还是域名模式	hostname/ip 默认 ip
NACOS_SERVER_PORT	Nacos 运行端口	默认 8848
NACOS_SERVER_IP	多网卡模式下可以指定IP
SPRING_DATASOURCE_PLATFORM	单机模式下支持MYSQL数据库	mysql / 空 默认:空
MYSQL_SERVICE_HOST	数据库 连接地址
MYSQL_SERVICE_PORT	数据库端口	默认 : 3306
MYSQL_SERVICE_DB_NAME	数据库库名
MYSQL_SERVICE_USER	数据库用户名
MYSQL_SERVICE_PASSWORD	数据库用户密码
MYSQL_SERVICE_DB_PARAM	数据库连接参数	default : characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useSSL=false
MYSQL_DATABASE_NUM	数据库编号	默认 :1
JVM_XMS	-Xms	默认 :1g
JVM_XMX	-Xmx	默认 :1g
JVM_XMN	-Xmn	默认 :512m
JVM_MS	-XX:MetaspaceSize	默认 :128m
JVM_MMS	-XX:MaxMetaspaceSize	默认 :320m
NACOS_DEBUG	是否开启远程DEBUG	y/n 默认 :n
TOMCAT_ACCESSLOG_ENABLED	server.tomcat.accesslog.enabled	默认 :false
NACOS_AUTH_SYSTEM_TYPE	权限系统类型选择,目前只支持nacos类型	默认 :nacos
NACOS_AUTH_ENABLE	是否开启权限系统	默认 :false
NACOS_AUTH_TOKEN_EXPIRE_SECONDS	token 失效时间	默认 :18000
NACOS_AUTH_TOKEN	token	默认 :SecretKey012345678901234567890123456789012345678901234567890123456789
NACOS_AUTH_CACHE_ENABLE	权限缓存开关 ,开启后权限缓存的更新默认有15秒的延迟	默认 : false
MEMBER_LIST	通过环境变量的方式设置集群地址	例子:192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809
EMBEDDED_STORAGE	是否开启集群嵌入式存储模式	embedded 默认 : none
NACOS_AUTH_CACHE_ENABLE	nacos.core.auth.caching.enabled	default : false
NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE	nacos.core.auth.enable.userAgentAuthWhite	default : false
NACOS_AUTH_IDENTITY_KEY	nacos.core.auth.server.identity.key	default : serverIdentity
NACOS_AUTH_IDENTITY_VALUE	nacos.core.auth.server.identity.value	default : security
NACOS_SECURITY_IGNORE_URLS	nacos.security.ignore.urls	default : /,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/p
--------------------------------------------------------------