服务注册和发现:

首先api层调用相应的rpc服务必须要知道ip:port或者域名(k8s的service)(api和api api和rpc rpc和rpc之间都可能访问)
如果服务数量多了,在采用这种服务独立的配置文件的方式来获取ip:port会很麻烦,尤其是微服务环境中
比如要新增一个服务,或者通过scale服务的副本数目来实现高并发,那么这是整个架构中各个服务间的通信就要相应的添加配置
可能会很多服务都要添加这个新服务的ip:port等
也就是新增或者修改了某个服务导致其他的服务要更新


添加个注册中心,api或者rpc或者各个副本都要来注册自己的信息,比如ip:port,那么比如api访问某个rpc服务时就去注册中心找
(比如要访问a服务,那么就去注册中心拉取a服务相关的注册的配置信息,从而访问a服务

注册中心:注册 被拉取 健康检查(检查服务可用性)   zookeeper consul etcd

包括最外层的服务网关,也可以到注册中心拿到相应的服务,从而转发流量的

consul安装:
docker run -d -p 8500:8500 -p 8300:8300 -p 8301:8301 -p 8302:8302 -p 8600:8600/udp consul consul agent -dev -client=0.0.0.0
docker container update --restart=always container_id
浏览器访问:127.0.0.1:8500   service
(8500 http 8600 dns)
dns访问测试:dig @192.168.2.100 -p 8600 consul.service.consul SRV
完整域名后缀service.consul consul是service列表中默认有的
通过域名方式访问,从consul中拿到域名对应的ip,也就是consul也实现了dns服务器的功能,或者k8s中的service





-----------------------consul的api接口
支持http,直接使用postman即可


1.添加服务
/agent/service/register(http://127.0.0.1:8500/v1/...) PUT conten-type是json
发送的数据是raw json

{
    "Name":"user-rpc",
    "ID":"user-rpc",
    "Tags":["web","v1"],
    "Address":"127.0.0.1",
    "Port":"50051"
}
如果不指明服务进行健康检查,那么service列表看到服务默认显示健康检查通过

一般需要 Name ID(不提供就和Name一致) Tag Address(ip地址) Port Check

2.注销服务
/agent/service/deregister/user-rpc(ID)   PUT


go的consul库来实现服务的注册 健康检查 发现

将rpc中的服务注册进consul中,api层通过consul去服务发现rpc

grpc的健康检查不像gin等web,要调用相应的接口

rpc层主要是通过consul实现服务注册,api层主要是服务注册和服务发现

-------------------反向代理 负载均衡
一个网关管理很多种服务器更像是反向代理
一个网关管理很多个同一个服务的多个实例,更像是负载均衡

请求进来到微服务网关,网关将流量转发到api层各类api服务,每个api服务可能有多个实例,这是一个负载均衡,http
api服务调用也就是请求访问rpc服务,rpc服务可能有很多个实例,这是一个负载均衡,grpc
可能微服务网关也有多个实例,也需要负载均衡,一般在外层价格nginx或者lvs

--------------负载均衡策略:
集中式负载均衡:
比如请求方(api)请求一个服务(rpc),可以去dns服务器比如consul注册中心拿到服务的信息,可能有多个实例
然后在请求方和服务端之间加一个独立的lb,比如nginx等,请求方和服务端解耦
问题就是如果流量高了,那么这个lb不论是软件还是硬件的瓶颈对整体的服务调用的性能影响就很高

进程内负载均衡:
比如请求方(api)请求一个服务(rpc),可以去dns服务器比如consul注册中心拿到服务的信息(通过user-rpc这个名称拉取服务的全部信息,可以是api服务通过一个goroutine来不断拉取,监听,存放到内存中比如slice,或者map加锁),可能有多个实例

独立进程负载均衡:
实际上就是各种语言写的lb,以一个独立进程的方式和请求方比如api服务部署在同一台主机上,后续跟进程内负载均衡类似



----------------------------负载均衡算法
1.轮循,公平对待每一台机器,如果机器的资源差异较大
2.随机
3.加权轮循
4.加权随机
5.源地址哈希,相同的客户端ip,如果服务端列表不变,则固定访问某一台机器
6.最小连接数,连接数最少的服务器

开发人员主要处理的是grpc调用的负载均衡,外部的nginx转发到api层等主要是运维做

实际上grpc内置了grpcdb proxy来做负载均衡策略,可以代码内定义,也可以引入外部lb的负载均衡策略
首先grpc的client得先去注册中心consul拉取服务信息
mbobakov/grpc-consul-resolver主要用于将注册中心服务拉取到本地




































