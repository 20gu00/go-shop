// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: commodity.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommodityClient is the client API for Commodity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommodityClient interface {
	// 商品 commodity服务
	// 商品列表
	CommodityList(ctx context.Context, in *CommodityFilterReq, opts ...grpc.CallOption) (*CommodityListRes, error)
	// 商品增删改查
	CreateCommodity(ctx context.Context, in *CreateCommodityReq, opts ...grpc.CallOption) (*CommodityInfoRes, error)
	DeleteCommodity(ctx context.Context, in *DeleteCommodityInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateCommodity(ctx context.Context, in *CreateCommodityReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCommodity(ctx context.Context, in *CommodityInfoReq, opts ...grpc.CallOption) (*CommodityInfoRes, error)
	// 批量获取商品信息(比如一个订单中有多个商品,多个商品的id,勾选了多个商品,同时下单)
	GetBatchCommodity(ctx context.Context, in *BatchCommodityIdInfo, opts ...grpc.CallOption) (*CommodityListRes, error)
	// 商品分类 category服务
	// 商品分类列表
	AllCategoryList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CategoryListRes, error)
	// 获取商品的子分类
	SubCategoryList(ctx context.Context, in *CategoryListReq, opts ...grpc.CallOption) (*SubCategoryListRes, error)
	// 商品分类的增删改
	CreateCategory(ctx context.Context, in *CategoryInfoReq, opts ...grpc.CallOption) (*CategoryInfoRes, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateCategory(ctx context.Context, in *CategoryInfoReq, opts ...grpc.CallOption) (*empty.Empty, error)
	//轮播图
	BannerList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BannerListRes, error)
	CreateBanner(ctx context.Context, in *BannerReq, opts ...grpc.CallOption) (*BannerRes, error)
	DeleteBanner(ctx context.Context, in *BannerReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateBanner(ctx context.Context, in *BannerReq, opts ...grpc.CallOption) (*empty.Empty, error)
	//品牌
	BrandList(ctx context.Context, in *BrandFilterReq, opts ...grpc.CallOption) (*BrandListRes, error)
	CreateBrand(ctx context.Context, in *BrandReq, opts ...grpc.CallOption) (*BrandInfoRes, error)
	DeleteBrand(ctx context.Context, in *BrandReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateBrand(ctx context.Context, in *BrandReq, opts ...grpc.CallOption) (*empty.Empty, error)
	//品牌和分类
	CategoryBrandList(ctx context.Context, in *CategoryBrandFilterReq, opts ...grpc.CallOption) (*CategoryBrandListRes, error)
	//通过category获取brands
	GetCategoryBrandList(ctx context.Context, in *CategoryInfoReq, opts ...grpc.CallOption) (*BrandListRes, error)
	CreateCategoryBrand(ctx context.Context, in *CategoryBrandReq, opts ...grpc.CallOption) (*CategoryBrandRes, error)
	DeleteCategoryBrand(ctx context.Context, in *CategoryBrandReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateCategoryBrand(ctx context.Context, in *CategoryBrandReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type commodityClient struct {
	cc grpc.ClientConnInterface
}

func NewCommodityClient(cc grpc.ClientConnInterface) CommodityClient {
	return &commodityClient{cc}
}

func (c *commodityClient) CommodityList(ctx context.Context, in *CommodityFilterReq, opts ...grpc.CallOption) (*CommodityListRes, error) {
	out := new(CommodityListRes)
	err := c.cc.Invoke(ctx, "/Commodity/CommodityList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) CreateCommodity(ctx context.Context, in *CreateCommodityReq, opts ...grpc.CallOption) (*CommodityInfoRes, error) {
	out := new(CommodityInfoRes)
	err := c.cc.Invoke(ctx, "/Commodity/CreateCommodity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) DeleteCommodity(ctx context.Context, in *DeleteCommodityInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Commodity/DeleteCommodity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) UpdateCommodity(ctx context.Context, in *CreateCommodityReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Commodity/UpdateCommodity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) GetCommodity(ctx context.Context, in *CommodityInfoReq, opts ...grpc.CallOption) (*CommodityInfoRes, error) {
	out := new(CommodityInfoRes)
	err := c.cc.Invoke(ctx, "/Commodity/GetCommodity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) GetBatchCommodity(ctx context.Context, in *BatchCommodityIdInfo, opts ...grpc.CallOption) (*CommodityListRes, error) {
	out := new(CommodityListRes)
	err := c.cc.Invoke(ctx, "/Commodity/GetBatchCommodity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) AllCategoryList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CategoryListRes, error) {
	out := new(CategoryListRes)
	err := c.cc.Invoke(ctx, "/Commodity/AllCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) SubCategoryList(ctx context.Context, in *CategoryListReq, opts ...grpc.CallOption) (*SubCategoryListRes, error) {
	out := new(SubCategoryListRes)
	err := c.cc.Invoke(ctx, "/Commodity/SubCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) CreateCategory(ctx context.Context, in *CategoryInfoReq, opts ...grpc.CallOption) (*CategoryInfoRes, error) {
	out := new(CategoryInfoRes)
	err := c.cc.Invoke(ctx, "/Commodity/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Commodity/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) UpdateCategory(ctx context.Context, in *CategoryInfoReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Commodity/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) BannerList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BannerListRes, error) {
	out := new(BannerListRes)
	err := c.cc.Invoke(ctx, "/Commodity/BannerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) CreateBanner(ctx context.Context, in *BannerReq, opts ...grpc.CallOption) (*BannerRes, error) {
	out := new(BannerRes)
	err := c.cc.Invoke(ctx, "/Commodity/CreateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) DeleteBanner(ctx context.Context, in *BannerReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Commodity/DeleteBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) UpdateBanner(ctx context.Context, in *BannerReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Commodity/UpdateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) BrandList(ctx context.Context, in *BrandFilterReq, opts ...grpc.CallOption) (*BrandListRes, error) {
	out := new(BrandListRes)
	err := c.cc.Invoke(ctx, "/Commodity/BrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) CreateBrand(ctx context.Context, in *BrandReq, opts ...grpc.CallOption) (*BrandInfoRes, error) {
	out := new(BrandInfoRes)
	err := c.cc.Invoke(ctx, "/Commodity/CreateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) DeleteBrand(ctx context.Context, in *BrandReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Commodity/DeleteBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) UpdateBrand(ctx context.Context, in *BrandReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Commodity/UpdateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) CategoryBrandList(ctx context.Context, in *CategoryBrandFilterReq, opts ...grpc.CallOption) (*CategoryBrandListRes, error) {
	out := new(CategoryBrandListRes)
	err := c.cc.Invoke(ctx, "/Commodity/CategoryBrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) GetCategoryBrandList(ctx context.Context, in *CategoryInfoReq, opts ...grpc.CallOption) (*BrandListRes, error) {
	out := new(BrandListRes)
	err := c.cc.Invoke(ctx, "/Commodity/GetCategoryBrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) CreateCategoryBrand(ctx context.Context, in *CategoryBrandReq, opts ...grpc.CallOption) (*CategoryBrandRes, error) {
	out := new(CategoryBrandRes)
	err := c.cc.Invoke(ctx, "/Commodity/CreateCategoryBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) DeleteCategoryBrand(ctx context.Context, in *CategoryBrandReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Commodity/DeleteCategoryBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) UpdateCategoryBrand(ctx context.Context, in *CategoryBrandReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Commodity/UpdateCategoryBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommodityServer is the server API for Commodity service.
// All implementations must embed UnimplementedCommodityServer
// for forward compatibility
type CommodityServer interface {
	// 商品 commodity服务
	// 商品列表
	CommodityList(context.Context, *CommodityFilterReq) (*CommodityListRes, error)
	// 商品增删改查
	CreateCommodity(context.Context, *CreateCommodityReq) (*CommodityInfoRes, error)
	DeleteCommodity(context.Context, *DeleteCommodityInfo) (*empty.Empty, error)
	UpdateCommodity(context.Context, *CreateCommodityReq) (*empty.Empty, error)
	GetCommodity(context.Context, *CommodityInfoReq) (*CommodityInfoRes, error)
	// 批量获取商品信息(比如一个订单中有多个商品,多个商品的id,勾选了多个商品,同时下单)
	GetBatchCommodity(context.Context, *BatchCommodityIdInfo) (*CommodityListRes, error)
	// 商品分类 category服务
	// 商品分类列表
	AllCategoryList(context.Context, *empty.Empty) (*CategoryListRes, error)
	// 获取商品的子分类
	SubCategoryList(context.Context, *CategoryListReq) (*SubCategoryListRes, error)
	// 商品分类的增删改
	CreateCategory(context.Context, *CategoryInfoReq) (*CategoryInfoRes, error)
	DeleteCategory(context.Context, *DeleteCategoryReq) (*empty.Empty, error)
	UpdateCategory(context.Context, *CategoryInfoReq) (*empty.Empty, error)
	//轮播图
	BannerList(context.Context, *empty.Empty) (*BannerListRes, error)
	CreateBanner(context.Context, *BannerReq) (*BannerRes, error)
	DeleteBanner(context.Context, *BannerReq) (*empty.Empty, error)
	UpdateBanner(context.Context, *BannerReq) (*empty.Empty, error)
	//品牌
	BrandList(context.Context, *BrandFilterReq) (*BrandListRes, error)
	CreateBrand(context.Context, *BrandReq) (*BrandInfoRes, error)
	DeleteBrand(context.Context, *BrandReq) (*empty.Empty, error)
	UpdateBrand(context.Context, *BrandReq) (*empty.Empty, error)
	//品牌和分类
	CategoryBrandList(context.Context, *CategoryBrandFilterReq) (*CategoryBrandListRes, error)
	//通过category获取brands
	GetCategoryBrandList(context.Context, *CategoryInfoReq) (*BrandListRes, error)
	CreateCategoryBrand(context.Context, *CategoryBrandReq) (*CategoryBrandRes, error)
	DeleteCategoryBrand(context.Context, *CategoryBrandReq) (*empty.Empty, error)
	UpdateCategoryBrand(context.Context, *CategoryBrandReq) (*empty.Empty, error)
	mustEmbedUnimplementedCommodityServer()
}

// UnimplementedCommodityServer must be embedded to have forward compatible implementations.
type UnimplementedCommodityServer struct {
}

func (UnimplementedCommodityServer) CommodityList(context.Context, *CommodityFilterReq) (*CommodityListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommodityList not implemented")
}
func (UnimplementedCommodityServer) CreateCommodity(context.Context, *CreateCommodityReq) (*CommodityInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommodity not implemented")
}
func (UnimplementedCommodityServer) DeleteCommodity(context.Context, *DeleteCommodityInfo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommodity not implemented")
}
func (UnimplementedCommodityServer) UpdateCommodity(context.Context, *CreateCommodityReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommodity not implemented")
}
func (UnimplementedCommodityServer) GetCommodity(context.Context, *CommodityInfoReq) (*CommodityInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommodity not implemented")
}
func (UnimplementedCommodityServer) GetBatchCommodity(context.Context, *BatchCommodityIdInfo) (*CommodityListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchCommodity not implemented")
}
func (UnimplementedCommodityServer) AllCategoryList(context.Context, *empty.Empty) (*CategoryListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCategoryList not implemented")
}
func (UnimplementedCommodityServer) SubCategoryList(context.Context, *CategoryListReq) (*SubCategoryListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubCategoryList not implemented")
}
func (UnimplementedCommodityServer) CreateCategory(context.Context, *CategoryInfoReq) (*CategoryInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCommodityServer) DeleteCategory(context.Context, *DeleteCategoryReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedCommodityServer) UpdateCategory(context.Context, *CategoryInfoReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCommodityServer) BannerList(context.Context, *empty.Empty) (*BannerListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannerList not implemented")
}
func (UnimplementedCommodityServer) CreateBanner(context.Context, *BannerReq) (*BannerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanner not implemented")
}
func (UnimplementedCommodityServer) DeleteBanner(context.Context, *BannerReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedCommodityServer) UpdateBanner(context.Context, *BannerReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanner not implemented")
}
func (UnimplementedCommodityServer) BrandList(context.Context, *BrandFilterReq) (*BrandListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandList not implemented")
}
func (UnimplementedCommodityServer) CreateBrand(context.Context, *BrandReq) (*BrandInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedCommodityServer) DeleteBrand(context.Context, *BrandReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedCommodityServer) UpdateBrand(context.Context, *BrandReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedCommodityServer) CategoryBrandList(context.Context, *CategoryBrandFilterReq) (*CategoryBrandListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryBrandList not implemented")
}
func (UnimplementedCommodityServer) GetCategoryBrandList(context.Context, *CategoryInfoReq) (*BrandListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryBrandList not implemented")
}
func (UnimplementedCommodityServer) CreateCategoryBrand(context.Context, *CategoryBrandReq) (*CategoryBrandRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategoryBrand not implemented")
}
func (UnimplementedCommodityServer) DeleteCategoryBrand(context.Context, *CategoryBrandReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategoryBrand not implemented")
}
func (UnimplementedCommodityServer) UpdateCategoryBrand(context.Context, *CategoryBrandReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategoryBrand not implemented")
}
func (UnimplementedCommodityServer) mustEmbedUnimplementedCommodityServer() {}

// UnsafeCommodityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommodityServer will
// result in compilation errors.
type UnsafeCommodityServer interface {
	mustEmbedUnimplementedCommodityServer()
}

func RegisterCommodityServer(s grpc.ServiceRegistrar, srv CommodityServer) {
	s.RegisterService(&Commodity_ServiceDesc, srv)
}

func _Commodity_CommodityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommodityFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).CommodityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/CommodityList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).CommodityList(ctx, req.(*CommodityFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_CreateCommodity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommodityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).CreateCommodity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/CreateCommodity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).CreateCommodity(ctx, req.(*CreateCommodityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_DeleteCommodity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommodityInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).DeleteCommodity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/DeleteCommodity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).DeleteCommodity(ctx, req.(*DeleteCommodityInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_UpdateCommodity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommodityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).UpdateCommodity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/UpdateCommodity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).UpdateCommodity(ctx, req.(*CreateCommodityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_GetCommodity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommodityInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).GetCommodity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/GetCommodity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).GetCommodity(ctx, req.(*CommodityInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_GetBatchCommodity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCommodityIdInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).GetBatchCommodity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/GetBatchCommodity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).GetBatchCommodity(ctx, req.(*BatchCommodityIdInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_AllCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).AllCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/AllCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).AllCategoryList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_SubCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).SubCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/SubCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).SubCategoryList(ctx, req.(*CategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).CreateCategory(ctx, req.(*CategoryInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).DeleteCategory(ctx, req.(*DeleteCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).UpdateCategory(ctx, req.(*CategoryInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_BannerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).BannerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/BannerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).BannerList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/CreateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).CreateBanner(ctx, req.(*BannerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/DeleteBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).DeleteBanner(ctx, req.(*BannerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/UpdateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).UpdateBanner(ctx, req.(*BannerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_BrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).BrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/BrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).BrandList(ctx, req.(*BrandFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/CreateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).CreateBrand(ctx, req.(*BrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/DeleteBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).DeleteBrand(ctx, req.(*BrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/UpdateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).UpdateBrand(ctx, req.(*BrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_CategoryBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryBrandFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).CategoryBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/CategoryBrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).CategoryBrandList(ctx, req.(*CategoryBrandFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_GetCategoryBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).GetCategoryBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/GetCategoryBrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).GetCategoryBrandList(ctx, req.(*CategoryInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_CreateCategoryBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).CreateCategoryBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/CreateCategoryBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).CreateCategoryBrand(ctx, req.(*CategoryBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_DeleteCategoryBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).DeleteCategoryBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/DeleteCategoryBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).DeleteCategoryBrand(ctx, req.(*CategoryBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_UpdateCategoryBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).UpdateCategoryBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commodity/UpdateCategoryBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).UpdateCategoryBrand(ctx, req.(*CategoryBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Commodity_ServiceDesc is the grpc.ServiceDesc for Commodity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commodity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Commodity",
	HandlerType: (*CommodityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommodityList",
			Handler:    _Commodity_CommodityList_Handler,
		},
		{
			MethodName: "CreateCommodity",
			Handler:    _Commodity_CreateCommodity_Handler,
		},
		{
			MethodName: "DeleteCommodity",
			Handler:    _Commodity_DeleteCommodity_Handler,
		},
		{
			MethodName: "UpdateCommodity",
			Handler:    _Commodity_UpdateCommodity_Handler,
		},
		{
			MethodName: "GetCommodity",
			Handler:    _Commodity_GetCommodity_Handler,
		},
		{
			MethodName: "GetBatchCommodity",
			Handler:    _Commodity_GetBatchCommodity_Handler,
		},
		{
			MethodName: "AllCategoryList",
			Handler:    _Commodity_AllCategoryList_Handler,
		},
		{
			MethodName: "SubCategoryList",
			Handler:    _Commodity_SubCategoryList_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _Commodity_CreateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Commodity_DeleteCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Commodity_UpdateCategory_Handler,
		},
		{
			MethodName: "BannerList",
			Handler:    _Commodity_BannerList_Handler,
		},
		{
			MethodName: "CreateBanner",
			Handler:    _Commodity_CreateBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _Commodity_DeleteBanner_Handler,
		},
		{
			MethodName: "UpdateBanner",
			Handler:    _Commodity_UpdateBanner_Handler,
		},
		{
			MethodName: "BrandList",
			Handler:    _Commodity_BrandList_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _Commodity_CreateBrand_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _Commodity_DeleteBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _Commodity_UpdateBrand_Handler,
		},
		{
			MethodName: "CategoryBrandList",
			Handler:    _Commodity_CategoryBrandList_Handler,
		},
		{
			MethodName: "GetCategoryBrandList",
			Handler:    _Commodity_GetCategoryBrandList_Handler,
		},
		{
			MethodName: "CreateCategoryBrand",
			Handler:    _Commodity_CreateCategoryBrand_Handler,
		},
		{
			MethodName: "DeleteCategoryBrand",
			Handler:    _Commodity_DeleteCategoryBrand_Handler,
		},
		{
			MethodName: "UpdateCategoryBrand",
			Handler:    _Commodity_UpdateCategoryBrand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commodity.proto",
}
