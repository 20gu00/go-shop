// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.11
// source: commodity.proto

package pb

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//--------------------------------brand
type BrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Logo string `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`
}

func (x *BrandReq) Reset() {
	*x = BrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandReq) ProtoMessage() {}

func (x *BrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandReq.ProtoReflect.Descriptor instead.
func (*BrandReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{0}
}

func (x *BrandReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BrandReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrandReq) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

type BrandFilterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages       int32 `protobuf:"varint,1,opt,name=pages,proto3" json:"pages,omitempty"`
	PagePerNums int32 `protobuf:"varint,2,opt,name=pagePerNums,proto3" json:"pagePerNums,omitempty"`
}

func (x *BrandFilterReq) Reset() {
	*x = BrandFilterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandFilterReq) ProtoMessage() {}

func (x *BrandFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandFilterReq.ProtoReflect.Descriptor instead.
func (*BrandFilterReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{1}
}

func (x *BrandFilterReq) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *BrandFilterReq) GetPagePerNums() int32 {
	if x != nil {
		return x.PagePerNums
	}
	return 0
}

type BrandInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Logo string `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`
}

func (x *BrandInfoRes) Reset() {
	*x = BrandInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandInfoRes) ProtoMessage() {}

func (x *BrandInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandInfoRes.ProtoReflect.Descriptor instead.
func (*BrandInfoRes) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{2}
}

func (x *BrandInfoRes) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BrandInfoRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrandInfoRes) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

type BrandListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*BrandInfoRes `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrandListRes) Reset() {
	*x = BrandListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandListRes) ProtoMessage() {}

func (x *BrandListRes) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandListRes.ProtoReflect.Descriptor instead.
func (*BrandListRes) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{3}
}

func (x *BrandListRes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BrandListRes) GetData() []*BrandInfoRes {
	if x != nil {
		return x.Data
	}
	return nil
}

type BannerListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*BannerRes `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BannerListRes) Reset() {
	*x = BannerListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerListRes) ProtoMessage() {}

func (x *BannerListRes) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerListRes.ProtoReflect.Descriptor instead.
func (*BannerListRes) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{4}
}

func (x *BannerListRes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BannerListRes) GetData() []*BannerRes {
	if x != nil {
		return x.Data
	}
	return nil
}

type BannerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Url   string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *BannerReq) Reset() {
	*x = BannerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerReq) ProtoMessage() {}

func (x *BannerReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerReq.ProtoReflect.Descriptor instead.
func (*BannerReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{5}
}

func (x *BannerReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BannerReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BannerReq) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BannerReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type BannerRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Url   string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *BannerRes) Reset() {
	*x = BannerRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerRes) ProtoMessage() {}

func (x *BannerRes) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerRes.ProtoReflect.Descriptor instead.
func (*BannerRes) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{6}
}

func (x *BannerRes) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BannerRes) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BannerRes) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BannerRes) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

//----------------------------------category
type BatchCategoryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        []int32 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	GoodsNums int32   `protobuf:"varint,2,opt,name=goodsNums,proto3" json:"goodsNums,omitempty"`
	BrandNums int32   `protobuf:"varint,3,opt,name=brandNums,proto3" json:"brandNums,omitempty"`
}

func (x *BatchCategoryInfoReq) Reset() {
	*x = BatchCategoryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCategoryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCategoryInfoReq) ProtoMessage() {}

func (x *BatchCategoryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCategoryInfoReq.ProtoReflect.Descriptor instead.
func (*BatchCategoryInfoReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{7}
}

func (x *BatchCategoryInfoReq) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BatchCategoryInfoReq) GetGoodsNums() int32 {
	if x != nil {
		return x.GoodsNums
	}
	return 0
}

func (x *BatchCategoryInfoReq) GetBrandNums() int32 {
	if x != nil {
		return x.BrandNums
	}
	return 0
}

type CategoryEasyInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CategoryEasyInfoRes) Reset() {
	*x = CategoryEasyInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryEasyInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryEasyInfoRes) ProtoMessage() {}

func (x *CategoryEasyInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryEasyInfoRes.ProtoReflect.Descriptor instead.
func (*CategoryEasyInfoRes) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{8}
}

func (x *CategoryEasyInfoRes) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryEasyInfoRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CategoryFileterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsTab bool  `protobuf:"varint,2,opt,name=isTab,proto3" json:"isTab,omitempty"`
}

func (x *CategoryFileterReq) Reset() {
	*x = CategoryFileterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryFileterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryFileterReq) ProtoMessage() {}

func (x *CategoryFileterReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryFileterReq.ProtoReflect.Descriptor instead.
func (*CategoryFileterReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{9}
}

func (x *CategoryFileterReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryFileterReq) GetIsTab() bool {
	if x != nil {
		return x.IsTab
	}
	return false
}

type CategoryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *CategoryListReq) Reset() {
	*x = CategoryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryListReq) ProtoMessage() {}

func (x *CategoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryListReq.ProtoReflect.Descriptor instead.
func (*CategoryListReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{10}
}

func (x *CategoryListReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryListReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type CategoryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentCategory int32  `protobuf:"varint,3,opt,name=parentCategory,proto3" json:"parentCategory,omitempty"`
	Level          int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	IsTab          bool   `protobuf:"varint,5,opt,name=isTab,proto3" json:"isTab,omitempty"`
}

func (x *CategoryInfoReq) Reset() {
	*x = CategoryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfoReq) ProtoMessage() {}

func (x *CategoryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfoReq.ProtoReflect.Descriptor instead.
func (*CategoryInfoReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{11}
}

func (x *CategoryInfoReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryInfoReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryInfoReq) GetParentCategory() int32 {
	if x != nil {
		return x.ParentCategory
	}
	return 0
}

func (x *CategoryInfoReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CategoryInfoReq) GetIsTab() bool {
	if x != nil {
		return x.IsTab
	}
	return false
}

type DeleteCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCategoryReq) Reset() {
	*x = DeleteCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryReq) ProtoMessage() {}

func (x *DeleteCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryReq.ProtoReflect.Descriptor instead.
func (*DeleteCategoryReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteCategoryReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *QueryCategoryReq) Reset() {
	*x = QueryCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCategoryReq) ProtoMessage() {}

func (x *QueryCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCategoryReq.ProtoReflect.Descriptor instead.
func (*QueryCategoryReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{13}
}

func (x *QueryCategoryReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CategoryInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentCategory int32  `protobuf:"varint,3,opt,name=parentCategory,proto3" json:"parentCategory,omitempty"`
	Level          int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	IsTab          bool   `protobuf:"varint,5,opt,name=isTab,proto3" json:"isTab,omitempty"`
}

func (x *CategoryInfoRes) Reset() {
	*x = CategoryInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfoRes) ProtoMessage() {}

func (x *CategoryInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfoRes.ProtoReflect.Descriptor instead.
func (*CategoryInfoRes) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{14}
}

func (x *CategoryInfoRes) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryInfoRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryInfoRes) GetParentCategory() int32 {
	if x != nil {
		return x.ParentCategory
	}
	return 0
}

func (x *CategoryInfoRes) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CategoryInfoRes) GetIsTab() bool {
	if x != nil {
		return x.IsTab
	}
	return false
}

type CategoryListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data     []*CategoryInfoRes `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	JsonData string             `protobuf:"bytes,3,opt,name=jsonData,proto3" json:"jsonData,omitempty"`
}

func (x *CategoryListRes) Reset() {
	*x = CategoryListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryListRes) ProtoMessage() {}

func (x *CategoryListRes) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryListRes.ProtoReflect.Descriptor instead.
func (*CategoryListRes) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{15}
}

func (x *CategoryListRes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CategoryListRes) GetData() []*CategoryInfoRes {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CategoryListRes) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

type SubCategoryListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total        int32              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Info         *CategoryInfoRes   `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	SubCategorys []*CategoryInfoRes `protobuf:"bytes,3,rep,name=subCategorys,proto3" json:"subCategorys,omitempty"`
}

func (x *SubCategoryListRes) Reset() {
	*x = SubCategoryListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubCategoryListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCategoryListRes) ProtoMessage() {}

func (x *SubCategoryListRes) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCategoryListRes.ProtoReflect.Descriptor instead.
func (*SubCategoryListRes) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{16}
}

func (x *SubCategoryListRes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SubCategoryListRes) GetInfo() *CategoryInfoRes {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SubCategoryListRes) GetSubCategorys() []*CategoryInfoRes {
	if x != nil {
		return x.SubCategorys
	}
	return nil
}

type CategoryBrandFilterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages       int32 `protobuf:"varint,1,opt,name=pages,proto3" json:"pages,omitempty"`
	PagePerNums int32 `protobuf:"varint,2,opt,name=pagePerNums,proto3" json:"pagePerNums,omitempty"`
}

func (x *CategoryBrandFilterReq) Reset() {
	*x = CategoryBrandFilterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBrandFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBrandFilterReq) ProtoMessage() {}

func (x *CategoryBrandFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBrandFilterReq.ProtoReflect.Descriptor instead.
func (*CategoryBrandFilterReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{17}
}

func (x *CategoryBrandFilterReq) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *CategoryBrandFilterReq) GetPagePerNums() int32 {
	if x != nil {
		return x.PagePerNums
	}
	return 0
}

type FilterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages       int32 `protobuf:"varint,1,opt,name=pages,proto3" json:"pages,omitempty"`
	PagePerNums int32 `protobuf:"varint,2,opt,name=pagePerNums,proto3" json:"pagePerNums,omitempty"`
}

func (x *FilterReq) Reset() {
	*x = FilterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterReq) ProtoMessage() {}

func (x *FilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterReq.ProtoReflect.Descriptor instead.
func (*FilterReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{18}
}

func (x *FilterReq) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *FilterReq) GetPagePerNums() int32 {
	if x != nil {
		return x.PagePerNums
	}
	return 0
}

//-------------------categorybrand
type CategoryBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryId int32 `protobuf:"varint,2,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	BrandId    int32 `protobuf:"varint,3,opt,name=brandId,proto3" json:"brandId,omitempty"`
}

func (x *CategoryBrandReq) Reset() {
	*x = CategoryBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBrandReq) ProtoMessage() {}

func (x *CategoryBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBrandReq.ProtoReflect.Descriptor instead.
func (*CategoryBrandReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{19}
}

func (x *CategoryBrandReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryBrandReq) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CategoryBrandReq) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

type CategoryBrandRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Brand    *BrandInfoRes    `protobuf:"bytes,2,opt,name=brand,proto3" json:"brand,omitempty"`
	Category *CategoryInfoRes `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *CategoryBrandRes) Reset() {
	*x = CategoryBrandRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBrandRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBrandRes) ProtoMessage() {}

func (x *CategoryBrandRes) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBrandRes.ProtoReflect.Descriptor instead.
func (*CategoryBrandRes) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{20}
}

func (x *CategoryBrandRes) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryBrandRes) GetBrand() *BrandInfoRes {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *CategoryBrandRes) GetCategory() *CategoryInfoRes {
	if x != nil {
		return x.Category
	}
	return nil
}

type CategoryBrandListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*CategoryBrandRes `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CategoryBrandListRes) Reset() {
	*x = CategoryBrandListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBrandListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBrandListRes) ProtoMessage() {}

func (x *CategoryBrandListRes) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBrandListRes.ProtoReflect.Descriptor instead.
func (*CategoryBrandListRes) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{21}
}

func (x *CategoryBrandListRes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CategoryBrandListRes) GetData() []*CategoryBrandRes {
	if x != nil {
		return x.Data
	}
	return nil
}

//-----------------------------commodity
type BatchCommodityIdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []int32 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *BatchCommodityIdInfo) Reset() {
	*x = BatchCommodityIdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCommodityIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCommodityIdInfo) ProtoMessage() {}

func (x *BatchCommodityIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCommodityIdInfo.ProtoReflect.Descriptor instead.
func (*BatchCommodityIdInfo) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{22}
}

func (x *BatchCommodityIdInfo) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type CommodityFilterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 价格区间
	MinPri int32 `protobuf:"varint,2,opt,name=minPri,proto3" json:"minPri,omitempty"`
	MaxPri int32 `protobuf:"varint,3,opt,name=maxPri,proto3" json:"maxPri,omitempty"`
	Hot    bool  `protobuf:"varint,4,opt,name=hot,proto3" json:"hot,omitempty"`
	New    bool  `protobuf:"varint,5,opt,name=new,proto3" json:"new,omitempty"`
	// 是否是最上面的tab中的商品
	Tab bool `protobuf:"varint,6,opt,name=tab,proto3" json:"tab,omitempty"`
	// 点击以及目录,会列出目录下的其他级别目录
	// 上册目录
	TopCategory int32  `protobuf:"varint,7,opt,name=topCategory,proto3" json:"topCategory,omitempty"`
	Pages       int32  `protobuf:"varint,8,opt,name=pages,proto3" json:"pages,omitempty"`
	PagePerNum  int32  `protobuf:"varint,9,opt,name=pagePerNum,proto3" json:"pagePerNum,omitempty"`
	Brand       string `protobuf:"bytes,10,opt,name=brand,proto3" json:"brand,omitempty"`
	// 搜索关键字
	Key string `protobuf:"bytes,11,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *CommodityFilterReq) Reset() {
	*x = CommodityFilterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommodityFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityFilterReq) ProtoMessage() {}

func (x *CommodityFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityFilterReq.ProtoReflect.Descriptor instead.
func (*CommodityFilterReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{23}
}

func (x *CommodityFilterReq) GetMinPri() int32 {
	if x != nil {
		return x.MinPri
	}
	return 0
}

func (x *CommodityFilterReq) GetMaxPri() int32 {
	if x != nil {
		return x.MaxPri
	}
	return 0
}

func (x *CommodityFilterReq) GetHot() bool {
	if x != nil {
		return x.Hot
	}
	return false
}

func (x *CommodityFilterReq) GetNew() bool {
	if x != nil {
		return x.New
	}
	return false
}

func (x *CommodityFilterReq) GetTab() bool {
	if x != nil {
		return x.Tab
	}
	return false
}

func (x *CommodityFilterReq) GetTopCategory() int32 {
	if x != nil {
		return x.TopCategory
	}
	return 0
}

func (x *CommodityFilterReq) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *CommodityFilterReq) GetPagePerNum() int32 {
	if x != nil {
		return x.PagePerNum
	}
	return 0
}

func (x *CommodityFilterReq) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *CommodityFilterReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DeleteCommodityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCommodityInfo) Reset() {
	*x = DeleteCommodityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommodityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommodityInfo) ProtoMessage() {}

func (x *DeleteCommodityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommodityInfo.ProtoReflect.Descriptor instead.
func (*DeleteCommodityInfo) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteCommodityInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CommodityInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CommodityInfoReq) Reset() {
	*x = CommodityInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommodityInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityInfoReq) ProtoMessage() {}

func (x *CommodityInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityInfoReq.ProtoReflect.Descriptor instead.
func (*CommodityInfoReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{25}
}

func (x *CommodityInfoReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CommodityInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Categoryid  int32   `protobuf:"varint,3,opt,name=categoryid,proto3" json:"categoryid,omitempty"`
	CommoditySn string  `protobuf:"bytes,4,opt,name=commoditySn,proto3" json:"commoditySn,omitempty"`
	ReadNum     int32   `protobuf:"varint,5,opt,name=readNum,proto3" json:"readNum,omitempty"`
	FavNum      int32   `protobuf:"varint,6,opt,name=favNum,proto3" json:"favNum,omitempty"`
	SaleNum     int32   `protobuf:"varint,7,opt,name=saleNum,proto3" json:"saleNum,omitempty"`
	CommonPri   float32 `protobuf:"fixed32,8,opt,name=commonPri,proto3" json:"commonPri,omitempty"`
	// 本地价格
	ShopPri    float32  `protobuf:"fixed32,9,opt,name=shopPri,proto3" json:"shopPri,omitempty"`
	EasyDesc   string   `protobuf:"bytes,10,opt,name=easyDesc,proto3" json:"easyDesc,omitempty"`
	Desc       string   `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`
	FreeShip   bool     `protobuf:"varint,12,opt,name=freeShip,proto3" json:"freeShip,omitempty"`
	Images     []string `protobuf:"bytes,13,rep,name=images,proto3" json:"images,omitempty"`
	DescImages []string `protobuf:"bytes,14,rep,name=descImages,proto3" json:"descImages,omitempty"`
	FrontImage string   `protobuf:"bytes,15,opt,name=frontImage,proto3" json:"frontImage,omitempty"`
	New        bool     `protobuf:"varint,16,opt,name=new,proto3" json:"new,omitempty"`
	Hot        bool     `protobuf:"varint,17,opt,name=hot,proto3" json:"hot,omitempty"`
	Sale       bool     `protobuf:"varint,18,opt,name=sale,proto3" json:"sale,omitempty"`
	AddTime    int64    `protobuf:"varint,19,opt,name=addTime,proto3" json:"addTime,omitempty"`
	// 商品表有两个外键,可以查询到商品分类表和品牌表的信息
	Category *CategoryEasyInfoRes `protobuf:"bytes,20,opt,name=category,proto3" json:"category,omitempty"`
	Brand    *BrandInfoRes        `protobuf:"bytes,21,opt,name=brand,proto3" json:"brand,omitempty"`
}

func (x *CommodityInfoRes) Reset() {
	*x = CommodityInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommodityInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityInfoRes) ProtoMessage() {}

func (x *CommodityInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityInfoRes.ProtoReflect.Descriptor instead.
func (*CommodityInfoRes) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{26}
}

func (x *CommodityInfoRes) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommodityInfoRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommodityInfoRes) GetCategoryid() int32 {
	if x != nil {
		return x.Categoryid
	}
	return 0
}

func (x *CommodityInfoRes) GetCommoditySn() string {
	if x != nil {
		return x.CommoditySn
	}
	return ""
}

func (x *CommodityInfoRes) GetReadNum() int32 {
	if x != nil {
		return x.ReadNum
	}
	return 0
}

func (x *CommodityInfoRes) GetFavNum() int32 {
	if x != nil {
		return x.FavNum
	}
	return 0
}

func (x *CommodityInfoRes) GetSaleNum() int32 {
	if x != nil {
		return x.SaleNum
	}
	return 0
}

func (x *CommodityInfoRes) GetCommonPri() float32 {
	if x != nil {
		return x.CommonPri
	}
	return 0
}

func (x *CommodityInfoRes) GetShopPri() float32 {
	if x != nil {
		return x.ShopPri
	}
	return 0
}

func (x *CommodityInfoRes) GetEasyDesc() string {
	if x != nil {
		return x.EasyDesc
	}
	return ""
}

func (x *CommodityInfoRes) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CommodityInfoRes) GetFreeShip() bool {
	if x != nil {
		return x.FreeShip
	}
	return false
}

func (x *CommodityInfoRes) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CommodityInfoRes) GetDescImages() []string {
	if x != nil {
		return x.DescImages
	}
	return nil
}

func (x *CommodityInfoRes) GetFrontImage() string {
	if x != nil {
		return x.FrontImage
	}
	return ""
}

func (x *CommodityInfoRes) GetNew() bool {
	if x != nil {
		return x.New
	}
	return false
}

func (x *CommodityInfoRes) GetHot() bool {
	if x != nil {
		return x.Hot
	}
	return false
}

func (x *CommodityInfoRes) GetSale() bool {
	if x != nil {
		return x.Sale
	}
	return false
}

func (x *CommodityInfoRes) GetAddTime() int64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *CommodityInfoRes) GetCategory() *CategoryEasyInfoRes {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *CommodityInfoRes) GetBrand() *BrandInfoRes {
	if x != nil {
		return x.Brand
	}
	return nil
}

type CommodityListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*CommodityInfoRes `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int32               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *CommodityListRes) Reset() {
	*x = CommodityListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommodityListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityListRes) ProtoMessage() {}

func (x *CommodityListRes) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityListRes.ProtoReflect.Descriptor instead.
func (*CommodityListRes) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{27}
}

func (x *CommodityListRes) GetData() []*CommodityInfoRes {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CommodityListRes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateCommodityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GoodsSn         string   `protobuf:"bytes,3,opt,name=goodsSn,proto3" json:"goodsSn,omitempty"`
	Stocks          int32    `protobuf:"varint,7,opt,name=stocks,proto3" json:"stocks,omitempty"` //库存，
	MarketPrice     float32  `protobuf:"fixed32,8,opt,name=marketPrice,proto3" json:"marketPrice,omitempty"`
	ShopPrice       float32  `protobuf:"fixed32,9,opt,name=shopPrice,proto3" json:"shopPrice,omitempty"`
	GoodsBrief      string   `protobuf:"bytes,10,opt,name=goodsBrief,proto3" json:"goodsBrief,omitempty"`
	GoodsDesc       string   `protobuf:"bytes,11,opt,name=goodsDesc,proto3" json:"goodsDesc,omitempty"`
	ShipFree        bool     `protobuf:"varint,12,opt,name=shipFree,proto3" json:"shipFree,omitempty"`
	Images          []string `protobuf:"bytes,13,rep,name=images,proto3" json:"images,omitempty"`
	DescImages      []string `protobuf:"bytes,14,rep,name=descImages,proto3" json:"descImages,omitempty"`
	GoodsFrontImage string   `protobuf:"bytes,15,opt,name=goodsFrontImage,proto3" json:"goodsFrontImage,omitempty"`
	IsNew           bool     `protobuf:"varint,16,opt,name=isNew,proto3" json:"isNew,omitempty"`
	IsHot           bool     `protobuf:"varint,17,opt,name=isHot,proto3" json:"isHot,omitempty"`
	OnSale          bool     `protobuf:"varint,18,opt,name=onSale,proto3" json:"onSale,omitempty"`
	CategoryId      int32    `protobuf:"varint,19,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	BrandId         int32    `protobuf:"varint,20,opt,name=brandId,proto3" json:"brandId,omitempty"`
}

func (x *CreateCommodityReq) Reset() {
	*x = CreateCommodityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommodityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommodityReq) ProtoMessage() {}

func (x *CreateCommodityReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommodityReq.ProtoReflect.Descriptor instead.
func (*CreateCommodityReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{28}
}

func (x *CreateCommodityReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateCommodityReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCommodityReq) GetGoodsSn() string {
	if x != nil {
		return x.GoodsSn
	}
	return ""
}

func (x *CreateCommodityReq) GetStocks() int32 {
	if x != nil {
		return x.Stocks
	}
	return 0
}

func (x *CreateCommodityReq) GetMarketPrice() float32 {
	if x != nil {
		return x.MarketPrice
	}
	return 0
}

func (x *CreateCommodityReq) GetShopPrice() float32 {
	if x != nil {
		return x.ShopPrice
	}
	return 0
}

func (x *CreateCommodityReq) GetGoodsBrief() string {
	if x != nil {
		return x.GoodsBrief
	}
	return ""
}

func (x *CreateCommodityReq) GetGoodsDesc() string {
	if x != nil {
		return x.GoodsDesc
	}
	return ""
}

func (x *CreateCommodityReq) GetShipFree() bool {
	if x != nil {
		return x.ShipFree
	}
	return false
}

func (x *CreateCommodityReq) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CreateCommodityReq) GetDescImages() []string {
	if x != nil {
		return x.DescImages
	}
	return nil
}

func (x *CreateCommodityReq) GetGoodsFrontImage() string {
	if x != nil {
		return x.GoodsFrontImage
	}
	return ""
}

func (x *CreateCommodityReq) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *CreateCommodityReq) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *CreateCommodityReq) GetOnSale() bool {
	if x != nil {
		return x.OnSale
	}
	return false
}

func (x *CreateCommodityReq) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CreateCommodityReq) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

type CommodityReduceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId int32 `protobuf:"varint,1,opt,name=GoodsId,proto3" json:"GoodsId,omitempty"`
	Nums    int32 `protobuf:"varint,2,opt,name=nums,proto3" json:"nums,omitempty"`
}

func (x *CommodityReduceReq) Reset() {
	*x = CommodityReduceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommodityReduceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityReduceReq) ProtoMessage() {}

func (x *CommodityReduceReq) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityReduceReq.ProtoReflect.Descriptor instead.
func (*CommodityReduceReq) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{29}
}

func (x *CommodityReduceReq) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *CommodityReduceReq) GetNums() int32 {
	if x != nil {
		return x.Nums
	}
	return 0
}

type CommodityFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceMin    int32  `protobuf:"varint,1,opt,name=priceMin,proto3" json:"priceMin,omitempty"`
	PriceMax    int32  `protobuf:"varint,2,opt,name=priceMax,proto3" json:"priceMax,omitempty"`
	IsHot       bool   `protobuf:"varint,3,opt,name=isHot,proto3" json:"isHot,omitempty"`
	IsNew       bool   `protobuf:"varint,4,opt,name=isNew,proto3" json:"isNew,omitempty"`
	IsTab       bool   `protobuf:"varint,5,opt,name=isTab,proto3" json:"isTab,omitempty"`
	TopCategory int32  `protobuf:"varint,6,opt,name=topCategory,proto3" json:"topCategory,omitempty"`
	Pages       int32  `protobuf:"varint,7,opt,name=pages,proto3" json:"pages,omitempty"`
	PagePerNums int32  `protobuf:"varint,8,opt,name=pagePerNums,proto3" json:"pagePerNums,omitempty"`
	KeyWords    string `protobuf:"bytes,9,opt,name=keyWords,proto3" json:"keyWords,omitempty"`
	Brand       int32  `protobuf:"varint,10,opt,name=brand,proto3" json:"brand,omitempty"`
}

func (x *CommodityFilterRequest) Reset() {
	*x = CommodityFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commodity_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommodityFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityFilterRequest) ProtoMessage() {}

func (x *CommodityFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commodity_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityFilterRequest.ProtoReflect.Descriptor instead.
func (*CommodityFilterRequest) Descriptor() ([]byte, []int) {
	return file_commodity_proto_rawDescGZIP(), []int{30}
}

func (x *CommodityFilterRequest) GetPriceMin() int32 {
	if x != nil {
		return x.PriceMin
	}
	return 0
}

func (x *CommodityFilterRequest) GetPriceMax() int32 {
	if x != nil {
		return x.PriceMax
	}
	return 0
}

func (x *CommodityFilterRequest) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *CommodityFilterRequest) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *CommodityFilterRequest) GetIsTab() bool {
	if x != nil {
		return x.IsTab
	}
	return false
}

func (x *CommodityFilterRequest) GetTopCategory() int32 {
	if x != nil {
		return x.TopCategory
	}
	return 0
}

func (x *CommodityFilterRequest) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *CommodityFilterRequest) GetPagePerNums() int32 {
	if x != nil {
		return x.PagePerNums
	}
	return 0
}

func (x *CommodityFilterRequest) GetKeyWords() string {
	if x != nil {
		return x.KeyWords
	}
	return ""
}

func (x *CommodityFilterRequest) GetBrand() int32 {
	if x != nil {
		return x.Brand
	}
	return 0
}

var File_commodity_proto protoreflect.FileDescriptor

var file_commodity_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42,
	0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x22, 0x48, 0x0a, 0x0e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0x46, 0x0a, 0x0c,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x47, 0x0a, 0x0c, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a,
	0x0d, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x59, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x62, 0x0a, 0x14, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0x39,
	0x0a, 0x13, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x45, 0x61, 0x73, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x12, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x54, 0x61, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x54, 0x61, 0x62, 0x22, 0x37, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x89,
	0x01, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x54, 0x61, 0x62, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x61, 0x62, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x36, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x73, 0x54, 0x61, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73,
	0x54, 0x61, 0x62, 0x22, 0x69, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x86,
	0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0x43, 0x0a, 0x09, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0x5c,
	0x0a, 0x10, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x10,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x05,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0x53, 0x0a, 0x14, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xfa, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x50, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x68, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x61, 0x62, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x25, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc9, 0x04, 0x0a, 0x10, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x53, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x53, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x61, 0x76, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x61, 0x76, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x73, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x61, 0x73, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x73, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x73, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x65, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x10, 0x0a,
	0x03, 0x68, 0x6f, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x68, 0x6f, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73,
	0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x45, 0x61, 0x73, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x23, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x05, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x22, 0x4f, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe4, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x69, 0x65, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x69,
	0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x4e, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e,
	0x53, 0x61, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x53, 0x61,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x12,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x73,
	0x22, 0x9e, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x54, 0x61, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x54, 0x61, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x32, 0xdb, 0x0a, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x37, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x13, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x13, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x11, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x14, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x12, 0x11, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x15, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0f, 0x41, 0x6c, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x53, 0x75,
	0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x10, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x34, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0a,
	0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x32, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x0a, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x12, 0x09, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x09, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30,
	0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x09, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x43, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x0d, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x11, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x12, 0x11, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x12, 0x11, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42,
	0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commodity_proto_rawDescOnce sync.Once
	file_commodity_proto_rawDescData = file_commodity_proto_rawDesc
)

func file_commodity_proto_rawDescGZIP() []byte {
	file_commodity_proto_rawDescOnce.Do(func() {
		file_commodity_proto_rawDescData = protoimpl.X.CompressGZIP(file_commodity_proto_rawDescData)
	})
	return file_commodity_proto_rawDescData
}

var file_commodity_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_commodity_proto_goTypes = []interface{}{
	(*BrandReq)(nil),               // 0: BrandReq
	(*BrandFilterReq)(nil),         // 1: BrandFilterReq
	(*BrandInfoRes)(nil),           // 2: BrandInfoRes
	(*BrandListRes)(nil),           // 3: BrandListRes
	(*BannerListRes)(nil),          // 4: BannerListRes
	(*BannerReq)(nil),              // 5: BannerReq
	(*BannerRes)(nil),              // 6: BannerRes
	(*BatchCategoryInfoReq)(nil),   // 7: BatchCategoryInfoReq
	(*CategoryEasyInfoRes)(nil),    // 8: CategoryEasyInfoRes
	(*CategoryFileterReq)(nil),     // 9: CategoryFileterReq
	(*CategoryListReq)(nil),        // 10: CategoryListReq
	(*CategoryInfoReq)(nil),        // 11: CategoryInfoReq
	(*DeleteCategoryReq)(nil),      // 12: DeleteCategoryReq
	(*QueryCategoryReq)(nil),       // 13: QueryCategoryReq
	(*CategoryInfoRes)(nil),        // 14: CategoryInfoRes
	(*CategoryListRes)(nil),        // 15: CategoryListRes
	(*SubCategoryListRes)(nil),     // 16: SubCategoryListRes
	(*CategoryBrandFilterReq)(nil), // 17: CategoryBrandFilterReq
	(*FilterReq)(nil),              // 18: FilterReq
	(*CategoryBrandReq)(nil),       // 19: CategoryBrandReq
	(*CategoryBrandRes)(nil),       // 20: CategoryBrandRes
	(*CategoryBrandListRes)(nil),   // 21: CategoryBrandListRes
	(*BatchCommodityIdInfo)(nil),   // 22: BatchCommodityIdInfo
	(*CommodityFilterReq)(nil),     // 23: CommodityFilterReq
	(*DeleteCommodityInfo)(nil),    // 24: DeleteCommodityInfo
	(*CommodityInfoReq)(nil),       // 25: CommodityInfoReq
	(*CommodityInfoRes)(nil),       // 26: CommodityInfoRes
	(*CommodityListRes)(nil),       // 27: CommodityListRes
	(*CreateCommodityReq)(nil),     // 28: CreateCommodityReq
	(*CommodityReduceReq)(nil),     // 29: CommodityReduceReq
	(*CommodityFilterRequest)(nil), // 30: CommodityFilterRequest
	(*empty.Empty)(nil),            // 31: google.protobuf.Empty
}
var file_commodity_proto_depIdxs = []int32{
	2,  // 0: BrandListRes.data:type_name -> BrandInfoRes
	6,  // 1: BannerListRes.data:type_name -> BannerRes
	14, // 2: CategoryListRes.data:type_name -> CategoryInfoRes
	14, // 3: SubCategoryListRes.info:type_name -> CategoryInfoRes
	14, // 4: SubCategoryListRes.subCategorys:type_name -> CategoryInfoRes
	2,  // 5: CategoryBrandRes.brand:type_name -> BrandInfoRes
	14, // 6: CategoryBrandRes.category:type_name -> CategoryInfoRes
	20, // 7: CategoryBrandListRes.data:type_name -> CategoryBrandRes
	8,  // 8: CommodityInfoRes.category:type_name -> CategoryEasyInfoRes
	2,  // 9: CommodityInfoRes.brand:type_name -> BrandInfoRes
	26, // 10: CommodityListRes.data:type_name -> CommodityInfoRes
	23, // 11: Commodity.CommodityList:input_type -> CommodityFilterReq
	28, // 12: Commodity.CreateCommodity:input_type -> CreateCommodityReq
	24, // 13: Commodity.DeleteCommodity:input_type -> DeleteCommodityInfo
	28, // 14: Commodity.UpdateCommodity:input_type -> CreateCommodityReq
	25, // 15: Commodity.GetCommodity:input_type -> CommodityInfoReq
	22, // 16: Commodity.GetBatchCommodity:input_type -> BatchCommodityIdInfo
	31, // 17: Commodity.AllCategoryList:input_type -> google.protobuf.Empty
	10, // 18: Commodity.SubCategoryList:input_type -> CategoryListReq
	11, // 19: Commodity.CreateCategory:input_type -> CategoryInfoReq
	12, // 20: Commodity.DeleteCategory:input_type -> DeleteCategoryReq
	11, // 21: Commodity.UpdateCategory:input_type -> CategoryInfoReq
	31, // 22: Commodity.BannerList:input_type -> google.protobuf.Empty
	5,  // 23: Commodity.CreateBanner:input_type -> BannerReq
	5,  // 24: Commodity.DeleteBanner:input_type -> BannerReq
	5,  // 25: Commodity.UpdateBanner:input_type -> BannerReq
	1,  // 26: Commodity.BrandList:input_type -> BrandFilterReq
	0,  // 27: Commodity.CreateBrand:input_type -> BrandReq
	0,  // 28: Commodity.DeleteBrand:input_type -> BrandReq
	0,  // 29: Commodity.UpdateBrand:input_type -> BrandReq
	17, // 30: Commodity.CategoryBrandList:input_type -> CategoryBrandFilterReq
	11, // 31: Commodity.GetCategoryBrandList:input_type -> CategoryInfoReq
	19, // 32: Commodity.CreateCategoryBrand:input_type -> CategoryBrandReq
	19, // 33: Commodity.DeleteCategoryBrand:input_type -> CategoryBrandReq
	19, // 34: Commodity.UpdateCategoryBrand:input_type -> CategoryBrandReq
	27, // 35: Commodity.CommodityList:output_type -> CommodityListRes
	26, // 36: Commodity.CreateCommodity:output_type -> CommodityInfoRes
	31, // 37: Commodity.DeleteCommodity:output_type -> google.protobuf.Empty
	31, // 38: Commodity.UpdateCommodity:output_type -> google.protobuf.Empty
	26, // 39: Commodity.GetCommodity:output_type -> CommodityInfoRes
	27, // 40: Commodity.GetBatchCommodity:output_type -> CommodityListRes
	15, // 41: Commodity.AllCategoryList:output_type -> CategoryListRes
	16, // 42: Commodity.SubCategoryList:output_type -> SubCategoryListRes
	14, // 43: Commodity.CreateCategory:output_type -> CategoryInfoRes
	31, // 44: Commodity.DeleteCategory:output_type -> google.protobuf.Empty
	31, // 45: Commodity.UpdateCategory:output_type -> google.protobuf.Empty
	4,  // 46: Commodity.BannerList:output_type -> BannerListRes
	6,  // 47: Commodity.CreateBanner:output_type -> BannerRes
	31, // 48: Commodity.DeleteBanner:output_type -> google.protobuf.Empty
	31, // 49: Commodity.UpdateBanner:output_type -> google.protobuf.Empty
	3,  // 50: Commodity.BrandList:output_type -> BrandListRes
	2,  // 51: Commodity.CreateBrand:output_type -> BrandInfoRes
	31, // 52: Commodity.DeleteBrand:output_type -> google.protobuf.Empty
	31, // 53: Commodity.UpdateBrand:output_type -> google.protobuf.Empty
	21, // 54: Commodity.CategoryBrandList:output_type -> CategoryBrandListRes
	3,  // 55: Commodity.GetCategoryBrandList:output_type -> BrandListRes
	20, // 56: Commodity.CreateCategoryBrand:output_type -> CategoryBrandRes
	31, // 57: Commodity.DeleteCategoryBrand:output_type -> google.protobuf.Empty
	31, // 58: Commodity.UpdateCategoryBrand:output_type -> google.protobuf.Empty
	35, // [35:59] is the sub-list for method output_type
	11, // [11:35] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_commodity_proto_init() }
func file_commodity_proto_init() {
	if File_commodity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commodity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandFilterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCategoryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryEasyInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryFileterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubCategoryListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBrandFilterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBrandRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBrandListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCommodityIdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommodityFilterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommodityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommodityInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommodityInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommodityListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommodityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommodityReduceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commodity_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommodityFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commodity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commodity_proto_goTypes,
		DependencyIndexes: file_commodity_proto_depIdxs,
		MessageInfos:      file_commodity_proto_msgTypes,
	}.Build()
	File_commodity_proto = out.File
	file_commodity_proto_rawDesc = nil
	file_commodity_proto_goTypes = nil
	file_commodity_proto_depIdxs = nil
}
